#

CONFIG_F = "../config.json"
configfile: CONFIG_F

#### Algorithm configurations
ONE_NN_CORRELATION_LOG_TPM = 'FRAMEWORK_one_nn.FEATS_log_tpm'
ONE_NN_CORRELATION_LOG_TPM_10x = 'FRAMEWORK_one_nn.FEATS_log_tpm_10x_genes'

IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_ir.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'
CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_cdc.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'
TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_tpr.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'

PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_true.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_true.FEATS_log_tpm'

PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ir.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_tpr.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_bnc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'

# Test no downweighting by class
PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_false.ASSERTAMBIGNEG_false.FEATS_log_tpm'

# BNC variants
PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_svm.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_bnc.PREP_pca_3000.BINARY_svm.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_bnc_nb.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'

# Different number of PCA components
PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_1500.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_750.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_375_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_375.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
COMPARE_PCA_CONFIGS = [
    #PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_375_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
]

# Different regularization parameters
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_00001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_01.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_1.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_10.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_100.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_10000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_100000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
COMPARE_PENALTY_CONFIGS = [
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
]
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0002.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0004.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0006.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0008.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_002.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_004.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_006.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_008.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
COMPARE_PENALTY_FINE_GRAINED_CONFIGS = [
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    #PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
]

# Group weighted
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_00001.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0001.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_001.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_01.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_1.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1_0_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_1_0.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_10_0.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_100_0.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_1000_0.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_10000_0.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_100000_0.DOWNWEIGHTBYCLASS_true.DOWNWEIGHTBYGROUP_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP = [
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1_0_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
]



PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0002.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0004.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0006.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0008.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_002.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_004.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_006.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_008.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_01.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS = [
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
]

# Regularization parameters CLR
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_00001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_01.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_1.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_10.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_100.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_10000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_100000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
COMPARE_PENALTY_CLR_CONFIGS = [
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
]
# Fine-grained
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0002.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0004.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0006.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0008.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_002.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_004.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_006.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_008.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED = [
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
]

# The best parmaters with 10x genes
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'

# Trained on 10x genes
IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'

CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x = 'FRAMEWORK_cdc.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm_10x_genes'
IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x = 'FRAMEWORK_ir.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm_10x_genes'
TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x = 'FRAMEWORK_tpr.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm_10x_genes'

PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ir.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_tpr.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'


rule all:
    input:
        '{env}/final_figures/test_bulk_methods_AP_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/test_bulk_custom_vs_0_5_thresho_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/single_cell_compare_cello_methods_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/single_cell_compare_cello_methods_precision_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/single_cell_compare_cello_methods_AP_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/leave_study_out_full_bulk.CDF_inconsistences.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/10x_compare_other_methods_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/10x_compare_other_methods_precision_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/10x_compare_other_methods_recall_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/single_cell_leiden_1_0_filter_binary_prec_0_0_IR_F1_scores_on_graph.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/single_cell_leiden_1_0_filter_binary_prec_0_0_IR_precisions_on_graph.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/single_cell_leiden_1_0_AP_scores_on_graph.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/all_single_cell_compare_other_methods_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/all_single_cell_compare_other_methods_precision_boxplots.pdf'.format(env=config['env_dir'])

#################################################################################################################
#   Train and test 1NN
#   Features: log-TPM
#################################################################################################################
rule train_and_apply_one_nn:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        '{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [

            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/apply_model.py -t {env_dir}/datasets/{train} -p {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{test} log_tpm -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )

        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_one_nn:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_one_nn:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )
        ]
        for c in commands:
            shell(c)

####################################################
#   1-NN applied to non-10x single-cell data
#   Features: log-TPM
####################################################
rule train_and_apply_one_nn_single_cell:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [

            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_bulk_primary_cells_with_data',
                train='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/apply_model.py -c "-inf" -t {env_dir}/datasets/{train} -p {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{test} log_tpm -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )

        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_single_cell_one_nn:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )        
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_single_cell_one_nn:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_-inf.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_-inf.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "1NN" {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )
        ]
        for c in commands:
            shell(c)


rule evalute_joint_test_one_nn_single_cell:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/evaluate/evaluate_method_joint.py "1NN" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )
        ]
        for c in commands:
            shell(c)

#### Cluster by study, Leiden resolution = 1.0
rule train_and_apply_one_nn_single_cell_leiden_1_0:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_tpm'
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_bulk_primary_cells_with_data',
                train='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/apply_model.py -c "-inf" -t {env_dir}/datasets/{train} -p {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )

        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_single_cell_one_nn_leiden_1_0:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/binary_classification_results.thresh_-inf.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.thresh_-inf.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "1NN" {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )
        ]
        for c in commands:
            shell(c)


rule evaluate_rank_based_classifications_single_cell_one_nn_leiden_1_0:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "1NN" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )
        ]
        for c in commands:
            shell(c)

###################################################
#   1-NN applied to 10x dataset
#   Features: log-TPM
###################################################
rule train_and_apply_one_nn_10x_leiden_1_0_cell_leiden_1_0:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        ),
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_cpm'
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            train_feats='log_tpm_10x_genes',
            test='zheng_10x_PBMC_2000_cells_per_type',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=ONE_NN_CORRELATION_LOG_TPM_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm_10x_genes',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=ONE_NN_CORRELATION_LOG_TPM_10x
            ),
            'python {src}/apply_model.py -c "-inf" -t {env_dir}/datasets/{train} -p {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm_10x_genes',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=ONE_NN_CORRELATION_LOG_TPM_10x
            )

        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_one_nn_leiden_1_0:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.thresh_-inf.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm_10x_genes',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=ONE_NN_CORRELATION_LOG_TPM_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.thresh_-inf.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm_10x_genes',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=ONE_NN_CORRELATION_LOG_TPM_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm_10x_genes',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=ONE_NN_CORRELATION_LOG_TPM_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "1NN" {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                algo=ONE_NN_CORRELATION_LOG_TPM_10x
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_10x_one_nn_leiden_1_0:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm_10x_genes',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=ONE_NN_CORRELATION_LOG_TPM_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm_10x_genes',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=ONE_NN_CORRELATION_LOG_TPM_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm_10x_genes',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=ONE_NN_CORRELATION_LOG_TPM_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "1NN" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm_10x_genes',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=ONE_NN_CORRELATION_LOG_TPM_10x
            )
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous samples negative: false
####################################################

# TODO DEPRECATE
rule train_training_ind_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    #output:
    #    '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
    #        env_dir=config['env_dir'],
    #        train='train_set.untampered_bulk_primary_cells_with_data',
    #        algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
    #    )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

# TODO DEPRECATE
rule test_test_ind_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    #output:
    #    '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
    #        env_dir=config['env_dir'],
    #        train='train_set.untampered_bulk_primary_cells_with_data',
    #        test='test_set.untampered_bulk_primary_cells_with_data',
    #        algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
    #    )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)    

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   PCA components: 1500, 750, 375
####################################################
rule train_training_pca_ind_downweight_by_class_remove_ambig_compare_num_components:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        for c in commands:
            shell(c)


rule test_test_pca_ind_downweight_by_class_remove_ambig_compare_num_components:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        commands += [
            'python {src}/apply_model.py -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        for c in commands:
            shell(c)

rule evalute_rank_based_classifications_test_pca_ind_downweight_by_class_keep_ambig_compare_num_components:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        for c in commands:
            shell(c)

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   Group-weighted: true
#   Preprocess: PCA - 3,000 components
#   Penalties: 10, 100, 1000, 10000, 100000
##################################################
rule train_training_pca_3000_ind_downweight_by_class_and_group_remove_ambig_compare_penalties:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_and_group_remove_ambig_compare_penalties:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ],
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
        commands += [
            'python {src}/apply_model.py -c 0.5 -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_pca_3000_ind_downweight_by_class_and_group_remove_ambig_compare_penalties:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_test_pca_3000_ir_downweight_by_class_and_group_remove_ambig_compare_penalties:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS_DOWNWEIGHT_BY_GROUP
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   Preprocess: PCA - 3,000 components
#   Penalties: 10, 100, 1000, 10000, 100000
######################################################
rule train_training_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        commands += [
            'python {src}/apply_model.py -c 0.5 -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        for c in commands:
            shell(c)


rule evaluate_rank_based_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   Preprocess: PCA - 3,000 components
#   Penalties: 0.002, 0.004, 0.006, 0.008, 0.0002,
#       0.0004, 0.0006, 0.0008
####################################################
rule train_training_pca_3000_clr_downweight_by_class_remove_ambig_compare_penalties:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)


rule test_test_pca_3000_clr_downweight_by_class_remove_ambig_compare_penalties:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
        commands += [
            'python {src}/apply_model.py -c 0.5 -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
        for c in commands:
            shell(c)


rule evaluate_rank_based_classifications_test_pca_3000_clr_downweight_by_class_remove_ambig_compare_penalties:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_test_pca_3000_clr_downweight_by_class_remove_ambig_compare_penalties:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS
        ]
        for c in commands:
            shell(c)

######## Fine-grained
rule train_training_pca_3000_clr_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)


rule test_test_pca_3000_clr_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
        commands += [
            'python {src}/apply_model.py -c 0.5 -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_pca_3000_clr_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_test_pca_3000_clr_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CLR_CONFIGS_FINE_GRAINED
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   Preprocess: PCA - 3,000 components
#   Penalties: 0.002, 0.004, 0.006, 0.008, 0.0002,
#       0.0004, 0.0006, 0.0008
####################################################
rule train_training_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS + [PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG]
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ],
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS + [PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG]
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS + [PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG]
        ]
        commands += [
            'python {src}/apply_model.py -c 0.5 -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS + [PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG]
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS + [PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG]
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS + [PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG]
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS + [PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG]
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS + [PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG]
        ]
        for c in commands:
            shell(c)


####################################################
##   Algorithm: Independent classifiers
##   Features: log-TPM, 10x genes
##   Training set: bulk training set
##   Test set: bulk test set
##   Assert ambiguous terms negative: true
##   Preprocess: PCA - 3,000 components
##   Penalties: 0.002, 0.004, 0.006, 0.008, 0.0002,
##       0.0004, 0.0006, 0.0008
####################################################
rule train_training_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained_10x:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained_10x:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
        commands += [
            'python {src}/apply_model.py -c 0.5 -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm_10x_genes',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
        for c in commands:
            shell(c)


rule evaluate_rank_based_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained_10x:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained_10x:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_10x_CONFIGS
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   Preprocess: PCA - 3,000 components
#####################################################

rule train_training_pca_3000_ind_downweight_by_class_keep_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_keep_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Penalty: 0.0006
######################################################
rule train_training_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
        #'{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
        #    env_dir=config['env_dir'],
        #    train='train_set.untampered_bulk_primary_cells_with_data',
        #    test='test_set.untampered_bulk_primary_cells_with_data',
        #    algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        #)
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule test_test_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig_binary_custom_thresh:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -b -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_test_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig_binary_custom_thresh:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_joint_test_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curves.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Downweight by class: false
###################################################
rule train_training_pca_3000_ind_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_test_pca_3000_ind_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )   
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_test_pca_3000_ind_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Penalty: 0.0006
###################################################
rule train_all_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Isotonic regression
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessors: PCA - 3000 components
#   Training set: bulk training set
#   Test set: bulk test set
#   Penalty: 0.0006
#####################################################

rule train_training_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curves.json'.format(
            src=config['cello_dev'],
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_binary_classifications_test_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_per_sample_test_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/sample_centric_pr_curves.json'.format(
            src=config['cello_dev'],
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_sample_centric_rank.py "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json {env}/datasets/{test}/experiment_to_study.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


PREC_THRESHS_TEST_SET = [
    0.0, 0.1, 0.2, 0.3, 0.4, 0.5
]
rule filter_binary_vary_prec_thresh_select_most_confident_test_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        binary_results='{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        results='{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/filtered_binary_classification_results.prec_{prec}.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
                prec=str(prec)
            )
            for prec in PREC_THRESHS_TEST_SET
        ]
    run:
        commands = [
            'python {src}/select_final_cell_types.py {{input.binary_results}} {{input.results}} {{input.labels}} {{input.thresh}} {prec} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
                prec=prec
            )
            for prec in PREC_THRESHS_TEST_SET
        ]
        for c in commands:
            shell(c)

rule evalute_filtered_binary_prec_0_0_classifications_test_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_filtered_binary_prec_0_1_classifications_test_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/filtered_binary_classification_results.prec_0.1.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/filtered_binary_prec_0_1_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_filtered_binary_prec_0_2_classifications_test_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/filtered_binary_classification_results.prec_0.2.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/filtered_binary_prec_0_2_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

##################################################
#   Algorithm: Isotonic regressions
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: non-10x single-cell
#   Penalty: 0.0006
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
##################################################
rule train_all_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_single_cell_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        test_label='{}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_rank_based_classifications_test_single_cell_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_test_single_cell_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            train_feats='log_tpm',
            test_feats='log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train_feats='log_tpm',
                test_feats='log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train_feats='log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


############  Cluster within each study and aggregate
rule test_single_cell_aggregate_leiden_1_0_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        test_label='{}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train='untampered_bulk_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

PREC_THRESHS = [
    0.0, 0.1, 0.2
]
rule filter_binary_vary_prec_thresh_select_most_confident_single_cell_aggregate_by_cluster_leiden_1_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        binary_results='{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        results='{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/filtered_binary_classification_results.prec_{prec}.tsv'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
                prec=str(prec)
            )
            for prec in PREC_THRESHS
        ]
    run:
        commands = [
            'python {src}/select_final_cell_types.py {{input.binary_results}} {{input.results}} {{input.labels}} {{input.thresh}} {prec} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
                prec=prec
            )
            for prec in PREC_THRESHS
        ]
        for c in commands:
            shell(c)


rule evalute_test_single_cell_aggregate_leiden_1_0_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bin_results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        rank='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bin='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "IR" {{input.bin_results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output.bin}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_filter_prec_0_0_test_single_cell_aggregate_leiden_1_0_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -b -c "IR" {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_filter_prec_0_1_test_single_cell_aggregate_leiden_1_0_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/filtered_binary_classification_results.prec_0.1.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_1_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "IR" {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

###################################################
# Run on full single-cell dataset 
###################################################
rule test_all_single_cell_aggregate_leiden_1_0_pca_3000_ir_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        #test_label='{}/datasets/untampered_single_cell_primary_cells_with_data/labels.json'.format(config['env_dir']),
        #test_data='{env}/datasets/untampered_single_cell_primary_cells_with_data/{feats}.h5'.format(
        #    env=config['env_dir'],
        #    feats='aggregate_by_cluster_leiden_1_0_log_tpm'
        #),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_single_cell_primary_cells_with_data',
                train='untampered_bulk_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule filter_binary_vary_prec_thresh_select_most_confident_all_single_cell_aggregate_by_cluster_leiden_1_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        binary_results='{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        results='{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/filtered_binary_classification_results.prec_{prec}.tsv'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
                prec=str(prec)
            )
            for prec in PREC_THRESHS
        ]
    run:
        commands = [
            'python {src}/select_final_cell_types.py {{input.binary_results}} {{input.results}} {{input.labels}} {{input.thresh}} {prec} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
                prec=prec
            )
            for prec in PREC_THRESHS
        ]
        for c in commands:
            shell(c)

rule evalute_filter_prec_0_0_test_all_single_cell_aggregate_leiden_1_0_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -b -c "IR" {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

###################################################
#   Algorithm: True Path Rule
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Training set: bulk training set
#   Preprocessors: PCA - 3,000 components
#   Penalty: 0.0006
#   Test set: bulk test set
######################################################
rule train_training_pca_3000_tpr_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_tpr_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evaluate_rank_based_classifications_test_pca_3000_tpr_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
       '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_joint_test_pca_3000_tpr_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


###################################################
#   Algorithm: Bayesian Network Correction
#   Binary classifier: Logistic regression
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessing: PCA - 3,000 components
#   Training set: bulk training set
#   Test set: bulk test set
###################################################
rule train_training_pca_3000_bnc_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            #algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_bnc_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_rank_test_pca_3000_bnc_downweight_by_class_remove_ambig:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_pca_3000_bnc_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


##################################################
#   Algorithm: Bayesian Network Correction
#   Binary classifier: SVM
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessing: PCA - 3,000 components
#   Training set: bulk training set
#   Test set: bulk test set
###################################################
rule train_training_pca_3000_ind_svm_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)


rule train_training_pca_3000_bnc_svm_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_bnc_svm_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

###########################################################
#   Algorithm: Bayesian Network Correction, Naive Bayes
#   Binary classifier: logistic regression
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessing: PCA - 3,000 components
#   Training set: bulk training set
#   Test set: bulk test set
############################################################
rule train_training_pca_3000_bnc_naive_bayes_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_bnc_naive_bayes_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_test_pca_3000_bnc_naive_bayesdownweight_by_class_remove_ambig:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_pca_3000_bnc_naive_bayes_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Cascaded Logistic Regression
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
######################################################
rule train_training_clr_downweight_by_class:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            )

        ]
        for c in commands:
            shell(c)


rule test_test_clr_downweight_by_class:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            )
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 3,000 components
####################################################
rule train_pca_3000_training_clr_downweight_by_class_keep_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_clr_downweight_by_class_keep_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )
        ]
        for c in commands:
            shell(c)


####################################################
##   Algorithm: Cascaded logistic regression
##   Features: log-TPM
##   Training set: bulk training set
##   Test set: bulk test set
##   Preprocess: PCA - 3,000 components
#   Assert ambighous terms negative: false
#####################################################
rule train_pca_3000_training_clr_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


##################################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: full bulk dataset
#   Preprocess: PCA - 3,000 components
#   Penalty: 0.001
#   Assert ambiguous terms negative: false
##################################################

rule train_all_pca_3000_training_clr_downweight_by_class_remove_ambig_penalty_0_001:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ) 

        ]
        for c in commands:
            shell(c)


rule test_single_cell_aggregate_leiden_1_0_pca_3000_clr_downweight_by_class_remove_ambig_penalty_0_001:
    input:
        test_label='{}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train='untampered_bulk_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule filter_binary_vary_prec_thresh_select_most_confident_single_cell_aggregate_by_cluster_leiden_1_0_pca_3000_clr_penalty_0_001_downweight_by_class:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        binary_results='{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        results='{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/filtered_binary_classification_results.prec_{prec}.tsv'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
                prec=str(prec)
            )
            for prec in [0.0]
        ]
    run:
        commands = [
            'python {src}/select_final_cell_types.py {{input.binary_results}} {{input.results}} {{input.labels}} {{input.thresh}} {prec} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
                prec=prec
            )
            for prec in [0.0]
        ]
        for c in commands:
            shell(c)

rule evalute_test_single_cell_aggregate_leiden_1_0_pca_3000_clr_penalty_0_001_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bin_results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        rank='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bin='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "CLR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "CLR" {{input.bin_results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output.bin}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

########################## Cross-Validation ######################################

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Dataset: bulk training set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
###################################################
rule leave_study_out_train_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{dataset}/{algo}'.format(
                condor=config['condor_root'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{dataset}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule gather_leave_study_out_train_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}'.format(
                env=config['env_dir'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/gather_condor_results.py {condor}/{dataset}/{algo} fold_classification_results.tsv -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule evalute_rank_based_classifications_leave_study_out_train_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule decision_thresholds_pr_curves_leave_study_out_train_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'python {src}/determine_threshold_per_label.py {{input}} -o {{output}}'.format(
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)


###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Dataset: full bulk
#   Preprocess: PCA - 3,000 components
#   Penalty: 0.0006
#   Assert ambiguous terms negative: false
######################################################
rule leave_study_out_all_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{dataset}/{algo}'.format(
                condor=config['condor_root'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{dataset}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule gather_leave_study_out_all_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        '{condor}/{dataset}/{algo}/condor.submit'.format(
            condor=config['condor_root'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/gather_condor_results.py {condor}/{dataset}/{algo} fold_classification_results.tsv -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)


rule evalute_rank_based_classifications_leave_study_out_all_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule decision_thresholds_pr_curves_leave_study_out_all_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'python {src}/determine_threshold_per_label.py {{input}} -o {{output}}'.format(
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM, 10x genes
#   Preprocessors: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Penalty: 0.0006
#   Dataset: full bulk dataset
################################################
rule leave_study_out_all_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig_10x:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{dataset}/{algo}'.format(
                condor=config['condor_root'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{dataset}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule gather_leave_study_out_all_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig_10x:
    input:
        '{condor}/{dataset}/{algo}/condor.submit'.format(
            condor=config['condor_root'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/gather_condor_results.py {condor}/{dataset}/{algo} fold_classification_results.tsv -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)


rule evalute_rank_based_classifications_leave_study_out_all_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig_10x:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

 
rule decision_thresholds_pr_curves_leave_study_out_all_pca_3000_ind_downweight_by_class_penalty_0_0006_remove_ambig_10x:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'python {src}/determine_threshold_per_label.py {{input}} -o {{output}}'.format(
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

##############################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM
#   Preprocessors: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Dataset: full bulk dataset
##############################################
rule leave_study_out_all_pca_3000_clr_downweight_by_class_penalty_0_001_remove_ambig:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{algo}'.format(
                condor=config['condor_root'],
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule gather_leave_study_out_all_pca_3000_clr_downweight_by_class_penalty_0_001_remove_ambig:
    input:
        '{condor}/{algo}/condor.submit'.format(
            condor=config['condor_root'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/gather_condor_results.py {condor}/{algo} fold_classification_results.tsv -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule evalute_rank_based_classifications_leave_study_out_all_pca_3000_clr_downweight_by_class_penalty_0_001_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule decision_thresholds_pr_curves_leave_study_out_all_pca_3000_clr_downweight_by_class_penalty_0_001_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'python {src}/determine_threshold_per_label.py {{input}} -o {{output}}'.format(
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

###############################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM, 10x genes
#   Preprocessors: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Dataset: full bulk dataset
################################################
rule leave_study_out_all_pca_3000_clr_downweight_by_class_penalty_0_001_remove_ambig_10x:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{algo}'.format(
                condor=config['condor_root'],
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule gather_leave_study_out_all_pca_3000_clr_downweight_by_class_penalty_0_001_remove_ambig_10x:
    input:
        '{condor}/{algo}/condor.submit'.format(
            condor=config['condor_root'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/gather_condor_results.py {condor}/{algo} fold_classification_results.tsv -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule evalute_rank_based_classifications_leave_study_out_all_pca_3000_clr_downweight_by_class_penalty_0_001_remove_ambig_10x:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule decision_thresholds_pr_curves_leave_study_out_all_pca_3000_clr_downweight_by_class_penalty_0_001_remove_ambig_10x:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'python {src}/determine_threshold_per_label.py {{input}} -o {{output}}'.format(
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

########################## 10x Experiments #######################################

#####################################################
#   Algorithm: Isotonic regression
#   Features: log-TPM, 10x genes
#   Preprocessors: PCA - 3,000 components
#   Assert ambiguous terms negative: False
#   Training set: full bulk dataset
#   Test set: Zheng 10x PBMC, 2000 cells per type
######################################################
rule train_all_pca_3000_ind_downweight_by_class_penalty_0_0006_10x_genes:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)

rule train_all_pca_3000_ir_downweight_by_class_penalty_0_0006_10x_genes:
    input:
        label='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )   
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -m {{input.model}} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)


##
################### Leiden Resolution 0.5
rule test_10x_aggregate_by_cluster_leiden_0_5_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_0_5_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


rule evalute_rank_based_classifications_10x_aggregate_by_cluster_leiden_0_5_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/compare_methods_cell_type_centric_rank_based.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_0_5_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_0_5_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -b -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)



######### Leiden resolution = 1.0
rule test_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        #test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
        #    env=config['env_dir'],
        #    feats='aggregate_by_cluster_leiden_1_0_log_cpm'
        #),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


rule test_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_penalty_0_0006_downweight_by_class_default_thresh:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_cpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -b -c "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_penalty_0_0006_downweight_by_class_default_thresh:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.thresh_0.5.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.thresh_0.5.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -b -c "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


rule evalute_rank_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -b -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


######### Leiden resolution = 2.0
rule test_10x_aggregate_by_cluster_leiden_2_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_2_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_2_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_2_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

# Leiden resolution = 4.0
rule test_10x_aggregate_by_cluster_leiden_4_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_4_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_4_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_4_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


################ Leiden resolution = 8.0
rule test_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_8_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule test_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ind_penalty_0_0006_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_8_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} -i -e {finalize_feats} -t {env_dir}/datasets/{train} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                finalize_feats = 'log_tpm_10x_genes',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ind_penalty_0_0006_downweight_by_class_nn_finalize:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results_nearest_neigbhor_finalize.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics_nearest_neighbor_finalize.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "IND" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

PREC_THRESHS = [
    0.0, 0.1, 0.2
]
rule filter_binary_vary_prec_thresh_select_most_confident_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        binary_results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_{prec}.tsv'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=str(prec)
            )
            for prec in PREC_THRESHS
        ]
    run:
        commands = [
            'python {src}/select_final_cell_types.py {{input.binary_results}} {{input.results}} {{input.labels}} {{input.thresh}} {prec} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=prec
            )
            for prec in PREC_THRESHS
        ]
        for c in commands:
            shell(c)

rule evalute_filtered_binary_prec_0_0_classifications_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule filter_binary_vary_prec_thresh_select_most_confident_aggregate_by_cluster_leiden_2_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        binary_results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_{prec}.tsv'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=str(prec)
            )
            for prec in PREC_THRESHS
        ]
    run:
        commands = [
            'python {src}/select_final_cell_types.py {{input.binary_results}} {{input.results}} {{input.labels}} {{input.thresh}} {prec} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=prec
            )
            for prec in PREC_THRESHS
        ]
        for c in commands:
            shell(c)

rule filter_binary_vary_prec_thresh_select_most_confident_aggregate_by_cluster_leiden_4_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        binary_results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_{prec}.tsv'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=str(prec)
            )
            for prec in PREC_THRESHS
        ]
    run:
        commands = [
            'python {src}/select_final_cell_types.py {{input.binary_results}} {{input.results}} {{input.labels}} {{input.thresh}} {prec} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=prec
            )
            for prec in PREC_THRESHS
        ]
        for c in commands:
            shell(c)


rule filter_binary_vary_prec_thresh_select_most_confident_aggregate_by_cluster_leiden_8_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        binary_results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_{prec}.tsv'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=str(prec)
            )
            for prec in PREC_THRESHS
        ]
    run:
        commands = [
            'python {src}/select_final_cell_types.py {{input.binary_results}} {{input.results}} {{input.labels}} {{input.thresh}} {prec} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=prec
            )
            for prec in PREC_THRESHS
        ]
        for c in commands:
            shell(c)


rule evalute_filtered_binary_prec_0_0_classifications_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


rule evalute_filtered_binary_prec_0_1_classifications_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_0.1.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_1_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_filtered_binary_prec_0_2_classifications_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_0.2.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_2_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


#############  Pure clusters
rule test_10x_pure_clusters_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type.pure_clusters/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type.pure_clusters/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type.pure_clusters',
            train_feats='log_tpm',
            test_feats='log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type.pure_clusters',
            train_feats='log_tpm',
            test_feats='log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type.pure_clusters',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type.pure_clusters',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_pure_clusters_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type.pure_clusters',
            train_feats='log_tpm',
            test_feats='log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type.pure_clusters',
            train_feats='log_tpm',
            test_feats='log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type.pure_clusters',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type.pure_clusters',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

#################### Pseudo-bulk
rule test_10x_pseudo_bulk_pca_3000_ir_penalty_0_0006_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC.pseudo_bulk/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC.pseudo_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC.pseudo_bulk',
            train_feats='log_tpm',
            test_feats='log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC.pseudo_bulk',
            train_feats='log_tpm',
            test_feats='log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC.pseudo_bulk',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC.pseudo_bulk',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


######################################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM, 10x genes
#   Training set: full bulk dataset
#   Penalty: 0.001
#   Test set: Zheng 10x PBMC, 2000 cells per type
#######################################################
rule train_all_pca_3000_cdc_downweight_by_class_penalty_0_001_10x_genes:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)

# Leiden resolution = 0.5
rule test_10x_aggregate_by_cluster_leiden_0_5_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_0_5_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_0_5_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_0_5_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

# Leiden resolution = 1.0
rule test_10x_aggregate_by_cluster_leiden_1_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_1_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


rule evalute_rank_10x_aggregate_by_cluster_leiden_1_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


PREC_THRESHS_10x_CLR = [
    0.0
]
rule filter_binary_vary_prec_thresh_select_most_confident_10x_aggregate_by_cluster_leiden_1_0_pca_3000_clr_penalty_0_0006_downweight_by_class:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        binary_results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data', 
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        results='{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_{prec}.tsv'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=str(prec)
            )
            for prec in PREC_THRESHS_10x_CLR
        ]
    run:
        commands = [
            'python {src}/select_final_cell_types.py {{input.binary_results}} {{input.results}} {{input.labels}} {{input.thresh}} {prec} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x,
                prec=prec
            )
            for prec in PREC_THRESHS_10x_CLR
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_filter_binary_prec_0_0_10x_aggregate_by_cluster_leiden_1_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


# Leiden resolution = 2.0
rule test_10x_aggregate_by_cluster_leiden_2_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_2_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_2_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_2_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


# Leiden resolution = 4.0
rule test_10x_aggregate_by_cluster_leiden_4_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_4_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_4_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_4_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


# Leiden resolution = 8.0
rule test_10x_aggregate_by_cluster_leiden_8_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_8_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_8_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_8_0_pca_3000_clr_downweight_by_class_penalty_0_001:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


#######################################################
##   Algorithm: True Path Rule
##   Features: log-TPM, 10x genes
##   Training set: full bulk dataset
##   Test set: Zheng 10x PBMC, 2000 cells per type
#######################################################
rule train_all_pca_3000_tpr_downweight_by_class_10x_genes:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)

rule test_10x_aggregate_by_cluster_leiden_1_0_pca_3000_tpr_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_cpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_1_0_pca_3000_tpr_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -b -c "IR" {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


############################# Generate figures #######################################

###################################
#   Plot: CDF of label inconsistencies
###################################

# FIGURE FOR PAPER
rule analyze_inconsistent_labelings_leave_study_out_all_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/leave_study_out_full_bulk.CDF_inconsistences.pdf'.format(
            env=config['env_dir']
        )
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/analyze_inconsistent_labellings.py {{input}} {env}/datasets/{dataset}/labels.json leave_study_out_full_bulk -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)


################################################
#   Plot: UpSet plot of dataset compositions
################################################
rule upset_all:
    output:
        '{env}/final_figures/full_bulk_dataset_upset.pdf'.format(
            env=config['env_dir']
        )
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_upset_dataset_composition.py {env}/datasets/{dataset} -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)

rule upset_single_cell:
    output:
        '{env}/final_figures/single_cell_dataset_upset.pdf'.format(
            env=config['env_dir']
        )
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_upset_dataset_composition.py {env}/datasets/{dataset} -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

#######################################
# Plots: 
#   - Comparison box plots
#       - Avg. Precision
#   - Joint precision recall curves
# Test set: Bulk test set
# Algorithms: 
#   - Independent classifiers
#   - Isotonic Regression
#   - True Path Rule
#   - BNC
#   - 1NN
# PCA: 3000 components
########################################

# FIGURE FOR PAPER
rule draw_AP_boxplots_test_pca_3000_methods:
    input:
        ind='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        tpr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bnc='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
        #nn='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
        #    env=config['env_dir'],
        #    train='train_set.untampered_bulk_primary_cells_with_data',
        #    test='test_set.untampered_bulk_primary_cells_with_data',
        #    algo=ONE_NN_CORRELATION_LOG_TPM
        #)
    output:
        '{env}/final_figures/test_bulk_methods_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py {{input.ir}},{{input.tpr}},{{input.ind}},{{input.bnc}} "Ind.,IR,TPR,BNC" "Avg. Precision" "Method" test_bulk_methods_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)


# FIGURE FOR PAPER
rule draw_joint_pr_curves_test_pca_3000_methods:
    input:
        ind='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        tpr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        #clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
        #    env=config['env_dir'],
        #    train='train_set.untampered_bulk_primary_cells_with_data',
        #    test='test_set.untampered_bulk_primary_cells_with_data',
        #    algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        #),
        bnc='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
        #nn='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
        #    env=config['env_dir'],
        #    train='train_set.untampered_bulk_primary_cells_with_data',
        #    test='test_set.untampered_bulk_primary_cells_with_data',
        #    algo=ONE_NN_CORRELATION_LOG_TPM
        #)
    output:
        '{env}/final_figures/test_bulk_methods_joint_PR_curves.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_joint_pr_curves.py {{input.ind}},{{input.ir}},{{input.tpr}},{{input.bnc}} "Ind.,IR,TPR,BNC" -o {env}/final_figures/test_bulk_methods_joint_PR_curves'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#######################################
# Plots: 
#   - Comparison box plots
#       - Avg. Precision
#   - Joint precision recall curves
# Test set: Bulk test set
# Algorithms: 
#   - BNC
#   - BNC, Naive Bayes
# PCA: 3000 components
#######################################

# FIGURE FOR PAPER
rule draw_AP_boxplots_test_pca_3000_bnc_methods:
    input:
        bnc='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bnc_nb='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_bnc_methods_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py {{input.bnc}},{{input.bnc_nb}} "BNC,NB" "Avg. Precision" "Method" test_bulk_bnc_methods_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_joint_pr_curves_test_pca_3000_bnc_methods:
    input:
        bnc='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bnc_nb='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_bnc_methods_joint_PR_curves.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_joint_pr_curves.py {{input.bnc}},{{input.bnc_nb}} "BNC,NB" -o {env}/final_figures/test_bulk_bnc_methods_joint_PR_curves'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#######################################
# Plot: Graph colored by metric
# Metrics: 
#   - F1-score
#   - Avg. Precision
# Test set: Bulk test set
# Algorithm: Isotonic regression
# PCA: 3000 components
#######################################
rule draw_F1_scores_on_graph_test_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_IR_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='test_set.untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)

rule draw_AP_scores_on_graph_test_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_IR_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='test_set.untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)

rule draw_binary_metrics_on_graph_test_pca_3000_ir_downweight_by_class_filtered_prec_0_0:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        f1='{env}/final_figures/test_bulk_IR_filtered_prec_0_0_F1_scores_on_graph.pdf'.format(env=config['env_dir']),
        prec='{env}/final_figures/test_bulk_IR_filtered_prec_0_0_precisions_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output.f1}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='test_set.untampered_bulk_primary_cells_with_data'
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} Precision {env}/datasets/{dataset}/labels.json -o {{output.prec}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='test_set.untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)

rule draw_binary_metrics_on_graph_test_pca_3000_ir_downweight_by_class_filtered_prec_0_1:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/filtered_binary_prec_0_1_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        f1='{env}/final_figures/test_bulk_IR_filtered_prec_0_1_F1_scores_on_graph.pdf'.format(env=config['env_dir']),
        prec='{env}/final_figures/test_bulk_IR_filtered_prec_0_1_precisions_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output.f1}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='test_set.untampered_bulk_primary_cells_with_data'
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} Precision {env}/datasets/{dataset}/labels.json -o {{output.prec}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='test_set.untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_test_pca_3000_ir_downweight_by_class_filtered_prec_0_2:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/filtered_binary_prec_0_2_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_IR_filtered_prec_0_2_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='test_set.untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)

#######################################
# Plot: Comparison boxplots
# Metric: Avg. Precision
# Test set: Bulk test set
# Algorithm: Independent classifiers
# Class-balanced: Yes vs. No
########################################

# FIGURE FOR PAPER
rule draw_AP_boxplots_test_downweight_vs_no_downweight:
    input:
        downweight='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        no_downweight='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_downweight_vs_no_downweight_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py {{input.downweight}},{{input.no_downweight}} "Yes,No" "Avg. Precision" "Class-Balanced Loss Function" test_bulk_downweight_vs_no_downweight_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_F1_boxplots_test_downweight_vs_no_downweight:
    input:
        downweight='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        no_downweight='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_downweight_vs_no_downweight_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py {{input.downweight}},{{input.no_downweight}} "Yes,No" "F1-Score" "Class-Balanced Loss Function" test_bulk_downweight_vs_no_downweight_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#######################################
#   Use threshold of 0.5 or custom
#   thresholds
#######################################

# FIGURE FOR PAPER
rule draw_boxplots_test_custom_threshold_vs_0_5_threshold:
    input:
        default='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        custom='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_custom_vs_0_5_thresho_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py {{input.default}},{{input.custom}} "0.5,Data-driven" "F1-Score" "Threshold" test_bulk_custom_vs_0_5_thresho_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#######################################
# Plot: Comparison boxplots
# Metric: Avg. Precision
# Test set: Bulk test set
# Algorithm: Independent classifiers
# PCA components: 3000, 1500, 750, 375
#######################################

# FIGURE FOR PAPER
rule draw_AP_score_comparison_boxplots_test_pca_components:
    input:
        no_pca='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        pca_3000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        pca_1500='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        pca_750='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        pca_375='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_375_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_pca_components_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.no_pca}},{{input.pca_3000}},{{input.pca_1500}},{{input.pca_750}},{{input.pca_375}}" "No PCA,3000,1500,750,375" "Avg. Precision" "Number of Components" test_set_pca_components_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#########################################
# Plot: Comparison boxplots
# Metric: Avg. Precision
# Test set: Bulk test set
# Algorithm: Independent classifiers
# Group-weighted: true
# PCA components: 3000
# Penalties: 10, 100, 1000, 10000, 100000
##########################################
rule draw_AP_score_comparison_boxplots_group_weighted_test_penalties:
    input:
        c_0_00001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_0_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1_0_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_10='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_100='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_1000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_10000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_100000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_ir_penalties_AP_score_boxplots_downweight_by_group.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_00001}},{{input.c_0_0001}},{{input.c_0_001}},{{input.c_0_01}},{{input.c_0_1}},{{input.c_1}},{{input.c_10}},{{input.c_100}},{{input.c_1000}},{{input.c_10000}},{{input.c_100000}}" "0.00001,0.0001,0.001,0.01,0.1,1.0,10.0,100.0,1000.0,10000.0,100000.0" "Avg. Precision" "Penalty" test_set_ir_penalties_AP_score_boxplots_downweight_by_group -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_score_comparison_boxplots_group_weighted_test_penalties:
    input:
        c_0_00001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_0_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1_0_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_10='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_100='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_1000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_10000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        ),
        c_100000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_DOWNWEIGHT_BY_GROUP_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_ir_penalties_F1_score_boxplots_downweight_by_group.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_00001}},{{input.c_0_0001}},{{input.c_0_001}},{{input.c_0_01}},{{input.c_0_1}},{{input.c_1}},{{input.c_10}},{{input.c_100}},{{input.c_1000}},{{input.c_10000}},{{input.c_100000}}" "0.00001,0.0001,0.001,0.01,0.1,1.0,10.0,100.0,1000.0,10000.0,100000.0" "F1-Score" "Penalty" test_set_ir_penalties_F1_score_boxplots_downweight_by_group -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

##########################################
# Plot: Comparison boxplots
# Metric: Avg. Precision
# Test set: Bulk test set
# Algorithm: Independent classifiers
# PCA components: 3000
# Penalties: 10, 100, 1000, 10000, 100000
###########################################
rule draw_AP_score_comparison_boxplots_test_penalties:
    input:
        c_0_00001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_penalties_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_00001}},{{input.c_0_0001}},{{input.c_0_001}},{{input.c_0_01}},{{input.c_0_1}},{{input.c_1}},{{input.c_10}},{{input.c_100}},{{input.c_1000}},{{input.c_10000}},{{input.c_100000}}" "0.00001,0.0001,0.001,0.01,0.1,1.0,10.0,100.0,1000.0,10000.0,100000.0" "Avg. Precision" "Penalty" test_set_penalties_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_F1_score_comparison_boxplots_test_penalties:
    input:
        c_0_00001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_penalties_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_00001}},{{input.c_0_0001}},{{input.c_0_001}},{{input.c_0_01}},{{input.c_0_1}},{{input.c_1}},{{input.c_10}},{{input.c_100}},{{input.c_1000}},{{input.c_10000}},{{input.c_100000}}" "0.00001,0.0001,0.001,0.01,0.1,1.0,10.0,100.0,1000.0,10000.0,100000.0" "F1-Score" "Penalty" test_set_penalties_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_AP_score_comparison_boxplots_test_fine_grained_penalties:
    input:
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
    output:
        '{env}/final_figures/test_set_fine_grained_penalties_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_0001}},{{input.c_0_0002}},{{input.c_0_0004}},{{input.c_0_0006}},{{input.c_0_0008}},{{input.c_0_001}},{{input.c_0_002}},{{input.c_0_004}},{{input.c_0_006}},{{input.c_0_008}}" "0.0001,0.0002,0.0004,0.0006,0.0008,0.001,0.002,0.004,0.006,0.008" "Avg. Precision" "Penalty" test_set_fine_grained_penalties_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_F1_score_comparison_boxplots_test_fine_grained_penalties:
    input:
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
    output:
        '{env}/final_figures/test_set_fine_grained_penalties_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_0001}},{{input.c_0_0002}},{{input.c_0_0004}},{{input.c_0_0006}},{{input.c_0_0008}},{{input.c_0_001}},{{input.c_0_002}},{{input.c_0_004}},{{input.c_0_006}},{{input.c_0_008}}" "0.0001,0.0002,0.0004,0.0006,0.0008,0.001,0.002,0.004,0.006,0.008" "F1-Score" "Penalty" test_set_fine_grained_penalties_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)


###
rule draw_AP_score_comparison_boxplots_test_fine_grained_penalties_10x:
    input:
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_0002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_0004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_0006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_0008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/test_set_10x_fine_grained_penalties_AP_score_boxplots.pdf'.format(env=config['env_dir'])

    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_0001}},{{input.c_0_0002}},{{input.c_0_0004}},{{input.c_0_0006}},{{input.c_0_0008}},{{input.c_0_001}},{{input.c_0_002}},{{input.c_0_004}},{{input.c_0_006}},{{input.c_0_008}},{{input.c_0_01}}" "0.0001,0.0002,0.0004,0.0006,0.0008,0.001,0.002,0.004,0.006,0.008,0.01" "Avg. Precision" "Penalty" test_set_10x_fine_grained_penalties_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_score_comparison_boxplots_test_fine_grained_penalties_10x:
    input:
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_0002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_0004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_0006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_0008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/test_set_10x_fine_grained_penalties_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_0001}},{{input.c_0_0002}},{{input.c_0_0004}},{{input.c_0_0006}},{{input.c_0_0008}},{{input.c_0_001}},{{input.c_0_002}},{{input.c_0_004}},{{input.c_0_006}},{{input.c_0_008}},{{input.c_0_01}}" "0.0001,0.0002,0.0004,0.0006,0.0008,0.001,0.002,0.004,0.006,0.008,0.01" "F1-Score" "Penalty" test_set_10x_fine_grained_penalties_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#####################################
# Plot: Colored ontology graph
# Metric: F1-Score
# Test set: 10x 
# Algorithm: Independent classifiers
# Leiden resolution: 1.0
######################################
rule draw_precisions_on_graph_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_1_0_precisions_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} Precision {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_1_0_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_downweight_by_class_default_thresh:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.thresh_0.5.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_1_0_default_thresh_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_AP_scores_on_graph_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_1_0_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)


rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_2_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_2_0_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)


rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_AP_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

# CLR
rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_pca_3000_clr_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_clr_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)


rule draw_AP_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_pca_3000_clr_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_clr_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_binary_metrics_on_graph_10x_aggregate_by_cluster_leiden_1_0_filtered_binary_prec_0_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        f1='{env}/final_figures/10x_leiden_1_0_filtered_binary_pref_0_0_F1_scores_on_graph.pdf'.format(env=config['env_dir']),
        prec='{env}/final_figures/10x_leiden_1_0_filtered_binary_pref_0_0_precisions_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output.f1}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} Precision {env}/datasets/{dataset}/labels.json -o {{output.prec}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)





rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_filtered_binary_prec_0_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_filtered_binary_pref_0_0_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_filtered_binary_prec_0_1_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_1_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_filtered_binary_pref_0_1_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_filtered_binary_prec_0_2_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_2_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_filtered_binary_pref_0_2_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_filtered_binary_prec_0_6_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_6_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_filtered_binary_pref_0_6_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_filtered_binary_prec_0_8_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_8_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_filtered_binary_pref_0_8_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_filtered_binary_prec_0_9_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_9_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_filtered_binary_pref_0_9_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_comparison_boxplots_10x_compare_prec_filters:
    input:
        p_0_2='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_2_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        p_0_6='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_6_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        p_0_7='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_7_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        p_0_8='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_8_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        p_0_9='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_9_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        nn='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics_nearest_neighbor_finalize.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        f1='{env}/final_figures/10x_compare_precision_filters_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        prec='{env}/final_figures/10x_compare_precision_filters_precision_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  -p "{{input.p_0_2}},{{input.p_0_6}},{{input.p_0_7}},{{input.p_0_8}},{{input.p_0_9}},{{input.nn}}" "0.2,0.6,0.7,0.8,0.9,NN" F1-Score "Precision Threshold" 10x_compare_precision_filters_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  -p "{{input.p_0_2}},{{input.p_0_6}},{{input.p_0_7}},{{input.p_0_8}},{{input.p_0_9}},{{input.nn}}" "0.2,0.6,0.7,0.8,0.9,NN" Precision "Precision Threshold" 10x_compare_precision_filters_precision_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_metrics_on_graph_10x_aggregate_by_cluster_leiden_8_0_nn_finalize_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics_nearest_neighbor_finalize.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        f1='{env}/final_figures/10x_F1_score_leiden_8_0_nn_finalize_on_graph.pdf'.format(env=config['env_dir']),
        prec='{env}/final_figures/10x_precisions_leiden_8_0_nn_finalize_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output.f1}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type.pure_clusters'
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} Precision {env}/datasets/{dataset}/labels.json -o {{output.prec}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type.pure_clusters'
            )
        ]
        for c in commands:
            shell(c)

rule draw_precisions_on_graph_10x_pure_clusters_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type.pure_clusters',
            train_feats='log_tpm',
            test_feats='log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_pure_clusters_precisions_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} Precision {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type.pure_clusters'
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_AP_score_comparison_boxplots_10x_aggregate_by_cluster_clr_leiden_parameters:
    input:
        met_0_5='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_1_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_2_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_4_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_8_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_parameters_CLR_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.met_0_5}},{{input.met_1_0}},{{input.met_2_0}},{{input.met_4_0}},{{input.met_8_0}}" "0.5,1.0,2.0,4.0,8.0" "Avg. Precision" "Leiden Resolution" 10x_leiden_parameters_CLR_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_AP_score_comparison_boxplots_10x_aggregate_by_cluster_ir_leiden_parameters:
    input:
        met_0_5='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_1_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_2_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_4_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_8_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_IR_leiden_parameters_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.met_0_5}},{{input.met_1_0}},{{input.met_2_0}},{{input.met_4_0}},{{input.met_8_0}}" "0.5,1.0,2.0,4.0,8.0" "Avg. Precision" "Leiden Resolution" 10x_IR_leiden_parameters_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_score_comparison_boxplots_10x_aggregate_by_cluster_leiden_1_0_methods:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        tpr='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_1_0_methods_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.ir}},{{input.tpr}},{{input.clr}}" "IR,TPR,CLR" F1-Score "Method" 10x_leiden_1_0_methods_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

##### 10x data, comparison to scMatch


# FIGURE FOR PAPER
rule draw_binary_metrics_comparsion_boxplots_10x_compare_cello_methods:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_1_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        one_nn='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.thresh_-inf.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm_10x_genes',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=ONE_NN_CORRELATION_LOG_TPM_10x
        )
    output:
        '{env}/final_figures/10x_compare_cello_methods_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/10x_compare_cello_methods_precision_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/10x_compare_cello_methods_recall_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.ir}},{{input.clr}},{{input.one_nn}}" "IR,CLR,1NN" F1-Score "Method" 10x_compare_cello_methods_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.ir}},{{input.clr}},{{input.one_nn}}" "IR,CLR,1NN" Precision "Method" 10x_compare_cello_methods_precision_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.ir}},{{input.clr}},{{input.one_nn}}" "IR,CLR,1NN" Recall "Method" 10x_compare_cello_methods_recall_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_binary_metrics_comparison_boxplots_10x_compare_other_methods:
    input:
        cello_ir='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        cello_clr='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_1_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        one_nn='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.thresh_-inf.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm_10x_genes',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=ONE_NN_CORRELATION_LOG_TPM_10x
        ),
        scmatch='{env}/results/other_methods/scMatch/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir']
        ),
        singler_hca='{}/results/other_methods/SingleR.HCA/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_be='{}/results/other_methods/SingleR.BlueprintEncode/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_monaco='{}/results/other_methods/SingleR.Monaco/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        )
    output:
        '{env}/final_figures/10x_compare_other_methods_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/10x_compare_other_methods_precision_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/10x_compare_other_methods_recall_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.cello_ir}},{{input.cello_clr}},{{input.one_nn}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}},{{input.singler_monaco}}" "CellO (IR),CellO (CLR),1NN,scMatch,SingleR\n(HPCA),SingleR\n(BE),SingleR\n(M)" F1-Score "Method" 10x_compare_other_methods_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.cello_ir}},{{input.cello_clr}},{{input.one_nn}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}},{{input.singler_monaco}}" "CellO (IR),CellO (CLR),1NN,scMatch,SingleR\n(HPCA),SingleR\n(BE),SingleR\n(M)" Precision "Method" 10x_compare_other_methods_precision_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.cello_ir}},{{input.cello_clr}},{{input.one_nn}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}},{{input.singler_monaco}}" "CellO (IR),CellO (CLR),1NN,scMatch,SingleR\n(HPCA),SingleR\n(BE),SingleR\n(M)" Recall "Method" 10x_compare_other_methods_recall_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_precisions_comparison_boxplots_10x_compare_other_methods:
    input:
        cello='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        scmatch='{env}/results/other_methods/scMatch/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir']
        ),
        singler_hca='{}/results/other_methods/SingleR.HCA/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_be='{}/results/other_methods/SingleR.BlueprintEncode/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_monaco='{}/results/other_methods/SingleR.Monaco/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        )
    output:
        '{env}/final_figures/10x_compare_other_methods_precision_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.cello}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}},{{input.singler_monaco}}" "CellO,scMatch,SingleR\n(HPCA),SingleR\n(BE),SingleR\n(M)" Precision "Method" 10x_compare_other_methods_precision_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_scMatch:
    input:
        '{env}/results/other_methods/scMatch/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir']
        )
    output:
        '{env}/final_figures/scMatch_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_SingleR_BE:
    input:
        '{env}/results/other_methods/SingleR.BlueprintEncode/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir']
        )
    output:
        '{env}/final_figures/SingleR_BE_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_SingleR_Monaco:
    input:
        '{env}/results/other_methods/SingleR.Monaco/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir']
        )
    output:
        '{env}/final_figures/SingleR_Monaco_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_precisions_on_graph_10x_SingleR_Monaco:
    input:
        '{env}/results/other_methods/SingleR.Monaco/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir']
        )
    output:
        '{env}/final_figures/SingleR_Monaco_precisions_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} Precision {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_SingleR_HCA:
    input:
        '{env}/results/other_methods/SingleR.HCA/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir']
        )
    output:
        '{env}/final_figures/SingleR_HCA_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

###### non-10x single-cell, IR, leiden resolution = 1.0

# FIGURE FOR PAPER
rule draw_AP_comparison_boxplots_single_cell_compare_hierarchical:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_compare_hierarchical_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.ir}},{{input.clr}}" "IR,CLR" Precision "Method" single_cell_compare_hierarchical_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)


rule draw_F1_scores_on_graph_single_cell_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            train_feats='log_tpm',
            test_feats='log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_IR_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_single_cell_aggregate_by_cluster_leiden_1_0_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_leiden_1_0_IR_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

rule draw_AP_scores_on_graph_single_cell_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            train_feats='log_tpm',
            test_feats='log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_IR_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

rule draw_AP_scores_on_graph_single_cell_aggregate_by_cluster_leiden_1_0_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_leiden_1_0_IR_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_metrics_on_graph_single_cell_filt_prec_0_0_aggregate_by_cluster_leiden_1_0_ir_pca_3000_ind_downweight_by_class:
    input:
        bin='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        res='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        f1='{env}/final_figures/single_cell_leiden_1_0_filter_binary_prec_0_0_IR_F1_scores_on_graph.pdf'.format(env=config['env_dir']),
        prec='{env}/final_figures/single_cell_leiden_1_0_filter_binary_prec_0_0_IR_precisions_on_graph.pdf'.format(env=config['env_dir']),
        ap='{env}/final_figures/single_cell_leiden_1_0_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input.bin}} "F1-Score" {env}/datasets/{dataset}/labels.json -o {{output.f1}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input.bin}} "Precision" {env}/datasets/{dataset}/labels.json -o {{output.prec}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input.res}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -b {{input.bin}} -o {{output.ap}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)


rule draw_metrics_on_graph_single_cell_filt_prec_0_0_aggregate_by_cluster_leiden_1_0_clr_pca_3000_ind_downweight_by_class:
    input:
        bin='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        res='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        f1='{env}/final_figures/single_cell_leiden_1_0_filter_binary_prec_0_0_CLR_F1_scores_on_graph.pdf'.format(env=config['env_dir']),
        prec='{env}/final_figures/single_cell_leiden_1_0_filter_binary_prec_0_0_CLR_precisions_on_graph.pdf'.format(env=config['env_dir']),
        ap='{env}/final_figures/single_cell_leiden_1_0_CLR_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input.bin}} "F1-Score" {env}/datasets/{dataset}/labels.json -o {{output.f1}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input.bin}} "Precision" {env}/datasets/{dataset}/labels.json -o {{output.prec}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input.res}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -b {{input.bin}} -o {{output.ap}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)


rule draw_PR_curves_on_graph_single_cell_aggregate_by_cluster_leiden_1_0_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )   
    output: 
        '{env}/final_figures/single_cell_leiden_1_0_IR_PR_curves_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_pr_curves_on_graph.py {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

###### non-10x single-cell compare to other methods

# FIGURE FOR PAPER
rule draw_binary_metrics_comparison_boxplots_single_cell_compare_other_methods:
    input:
        cello='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        scmatch='{}/results/other_methods/scMatch/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_hca='{}/results/other_methods/SingleR.HCA/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_be='{}/results/other_methods/SingleR.BlueprintEncode/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        )
    output:
        '{env}/final_figures/single_cell_compare_other_methods_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/single_cell_compare_other_methods_precision_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.cello}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}}" "CellO (IR),scMatch,SingleR\n(HPCA),SingleR\n(BE)" F1-Score "Method" single_cell_compare_other_methods_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.cello}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}}" "CellO (IR),scMatch,SingleR\n(HPCA),SingleR\n(BE)" Precision "Method" single_cell_compare_other_methods_precision_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_binary_metrics_comparison_boxplots_single_cell_compare_other_methods_restrict_to_training:
    input:
        cello_ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        cello_ir_res = '/tier2/deweylab/mnbernstein/phenotyping_environments/metasra_1-4.annot_10/results/train_test_experiments/TRAIN_untampered_bulk_primary_cells_with_data_TEST_untampered_single_cell_primary_cells_with_data_cell_types_in_bulk_FEATS_aggregate_by_cluster_leiden_1_0_log_tpm/FRAMEWORK_ir.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm/classification_results.tsv',
        cello_clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        cello_clr_res='/tier2/deweylab/mnbernstein/phenotyping_environments/metasra_1-4.annot_10/results/train_test_experiments/TRAIN_untampered_bulk_primary_cells_with_data_TEST_untampered_single_cell_primary_cells_with_data_cell_types_in_bulk_FEATS_aggregate_by_cluster_leiden_1_0_log_tpm/FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm/classification_results.tsv',
        scmatch='{}/results/other_methods/scMatch/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        scmatch_res='{}/results/other_methods/scMatch/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/binary_classification_results.tsv'.format(
            config['env_dir']
        ),
        singler_hca='{}/results/other_methods/SingleR.HCA/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_hca_res='{}/results/other_methods/SingleR.HCA/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/binary_classification_results.tsv'.format(
            config['env_dir']
        ),
        singler_be='{}/results/other_methods/SingleR.BlueprintEncode/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_be_res='{}/results/other_methods/SingleR.BlueprintEncode/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/binary_classification_results.tsv'.format(
            config['env_dir']
        )
    output:
        '{env}/final_figures/single_cell_compare_other_methods_F1_score_boxplots_restrict_to_training.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/single_cell_compare_other_methods_precision_boxplots_restrict_to_training.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots_restrict_to_training.py  "{{input.cello_ir}},{{input.cello_clr}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}}" "{{input.cello_ir_res}},{{input.cello_clr_res}},{{input.scmatch_res}},{{input.singler_hca_res}},{{input.singler_be_res}}" "CellO (IR),CellO (CLR),scMatch,SingleR\n(HPCA),SingleR\n(BE)" F1-Score "Method" single_cell_compare_other_methods_F1_score_boxplots_restrict_to_training -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots_restrict_to_training.py  "{{input.cello_ir}},{{input.cello_clr}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}}" "{{input.cello_ir_res}},{{input.cello_clr_res}},{{input.scmatch_res}},{{input.singler_hca_res}},{{input.singler_be_res}}" "CellO (IR),CellO (CLR),scMatch,SingleR\n(HPCA),SingleR\n(BE)" Precision "Method" single_cell_compare_other_methods_precision_boxplots_restrict_to_training -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_binary_metrics_comparison_boxplots_single_cell_compare_cello_methods:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        one_nn='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.thresh_-inf.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    output:
        '{env}/final_figures/single_cell_compare_cello_methods_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/single_cell_compare_cello_methods_precision_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.ir}},{{input.clr}},{{input.one_nn}}" "IR,CLR,1NN" F1-Score "Method" single_cell_compare_cello_methods_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.ir}},{{input.clr}},{{input.one_nn}}" "IR,CLR,1NN" Precision "Method" single_cell_compare_cello_methods_precision_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

# FIGURE FOR PAPER
rule draw_rank_metrics_comparison_boxplots_single_cell_compare_cello_methods:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        one_nn='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    output:
        '{env}/final_figures/single_cell_compare_cello_methods_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.ir}},{{input.clr}},{{input.one_nn}}" "IR,CLR,1NN" "Avg. Precision" "Method" single_cell_compare_cello_methods_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)


# FIGURE FOR PAPER
rule draw_binary_metrics_comparison_boxplots_all_single_cell_compare_other_methods:
    input:
        cello='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        scmatch='{}/results/other_methods/scMatch/untampered_single_cell_primary_cells_with_data/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_hca='{}/results/other_methods/SingleR.HCA/untampered_single_cell_primary_cells_with_data/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        ),
        singler_be='{}/results/other_methods/SingleR.BlueprintEncode/untampered_single_cell_primary_cells_with_data/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        )
    output:
        '{env}/final_figures/all_single_cell_compare_other_methods_F1_score_boxplots.pdf'.format(env=config['env_dir']),
        '{env}/final_figures/all_single_cell_compare_other_methods_precision_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.cello}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}}" "CellO (IR),scMatch,SingleR\n(HPCA),SingleR\n(BE)" F1-Score "Method" all_single_cell_compare_other_methods_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.cello}},{{input.scmatch}},{{input.singler_hca}},{{input.singler_be}}" "CellO (IR),scMatch,SingleR\n(HPCA),SingleR\n(BE)" Precision "Method" all_single_cell_compare_other_methods_precision_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_percentage_cells_in_training_all_single_cell_compare_other_methods:
    input:
        cello_res = '/tier2/deweylab/mnbernstein/phenotyping_environments/metasra_1-4.annot_10/results/train_test_experiments/TRAIN_untampered_bulk_primary_cells_with_data_TEST_untampered_single_cell_primary_cells_with_data_FEATS_aggregate_by_cluster_leiden_1_0_log_tpm/FRAMEWORK_ir.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm/classification_results.tsv',
        scmatch_res='{}/results/other_methods/scMatch/untampered_single_cell_primary_cells_with_data/binary_classification_results.tsv'.format(
            config['env_dir']
        ),
        singler_hca_res='{}/results/other_methods/SingleR.HCA/untampered_single_cell_primary_cells_with_data/binary_classification_results.tsv'.format(
            config['env_dir']
        ),
        singler_be_res='{}/results/other_methods/SingleR.BlueprintEncode/untampered_single_cell_primary_cells_with_data/binary_classification_results.tsv'.format(
            config['env_dir']
        )
    output:
        '{env}/final_figures/all_single_cell_compare_other_methods_percentage_cell_types_in_training_bargraphs.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_bargraph_num_in_training.py "{{input.cello_res}},{{input.scmatch_res}},{{input.singler_hca_res}},{{input.singler_be_res}}" {env}/datasets/untampered_single_cell_primary_cells_with_data "CellO,scMatch,SingleR\n(HPCA),SingleR\n(BE)" F1-Score "Method" all_single_cell_compare_other_methods_percentage_cell_types_in_training_bargraphs -o {env}/final_figures/all_single_cell_compare_other_methods_percentage_cell_types_in_training_bargraphs'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)


rule draw_F1_scores_on_graph_single_cell_SingleR_HCA:
    input:
        '{}/results/other_methods/SingleR.HCA/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        )
    output:
        '{env}/final_figures/SingleR_HCA_single_cell_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_single_cell_scMatch:
    input:
        '{}/results/other_methods/scMatch/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/evaluation/binary_cell_type_metrics.tsv'.format(
            config['env_dir']
        )
    output:
        '{env}/final_figures/scMatch_single_cell_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

####### ~all~ single-cell, leiden resolution = 1.0
rule draw_binary_metrics_on_graph_single_all_cell_filt_prec_0_0_aggregate_by_cluster_leiden_1_0_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        f1='{env}/final_figures/all_single_cell_leiden_1_0_filter_binary_prec_0_0_IR_F1_scores_on_graph.pdf'.format(env=config['env_dir']),
        prec='{env}/final_figures/all_single_cell_leiden_1_0_filter_binary_prec_0_0_IR_precisions_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "F1-Score" {env}/datasets/{dataset}/labels.json -o {{output.f1}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data'
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Precision" {env}/datasets/{dataset}/labels.json -o {{output.prec}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)


###### non-10x single-cell, CLR, leiden resolution = 1.0
rule draw_F1_scores_on_graph_single_cell_aggregate_by_cluster_leiden_1_0_clr_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_leiden_1_0_CLR_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

###### non-10x single-cell, compare CLR and IR leiden resolution = 1.0
rule draw_AP_score_comparison_boxplots_single_cell_aggregate_by_cluster_leiden_1_0:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_methods_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.ir}},{{input.clr}}" "IR,CLR" "Avg. Precision" "Method" single_cell_methods_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

###### non-10x single-cell, compare IR when clustering (leiden resolution = 1.0) versus not clustering
rule draw_AP_score_comparison_boxplots_single_cell_aggregate_by_cluster_leiden_1_0_vs_no_leiden:
    input:
        clust='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        no_clust='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_IR_leiden_1_0_vs_no_leiden_AP_score_boxplots.pdf'.format(env=config['env_dir']),
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.clust}},{{input.no_clust}}" "Cluster,No Clustering" "Avg. Precision" "Features" single_cell_IR_leiden_1_0_vs_no_leiden_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_score_comparison_boxplots_single_cell_aggregate_by_cluster_leiden_1_0_vs_no_leiden:
    input:
        clust='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        no_clust='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_IR_leiden_1_0_vs_no_leiden_F1_score_boxplots.pdf'.format(env=config['env_dir']),
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.clust}},{{input.no_clust}}" "Cluster,No Clustering" "F1-Score" "Features" single_cell_IR_leiden_1_0_vs_no_leiden_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)



# no_agg
rule draw_AP_score_comparison_boxplots_single_cell:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_methods_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.ir}},{{input.clr}}" "IR,CLR" "Avg. Precision" "Method" single_cell_methods_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#######################################################
#   Algorithm: Isotonic Regression
#   Features: log-TPM, 10x genes
#   Training set: full bulk dataset
#   Test set: Zheng 10x PBMC, 2000 cells per type
#######################################################
rule train_all_ir_downweight_by_class_10x_genes:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            )

        ]
        for c in commands:
            shell(c)


##########################################################
#
##########################################################
rule draw_AP_score_comparison_boxplots_clr_test_penalties:
    input:
        c_0_00001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_clr_penalties_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_00001}},{{input.c_0_0001}},{{input.c_0_001}},{{input.c_0_01}},{{input.c_0_1}},{{input.c_10}},{{input.c_100}},{{input.c_1000}},{{input.c_10000}},{{input.c_100000}}" "0.00001,0.0001,0.001,0.01,0.1,10.0,100.0,1000.0,10000.0,100000" "Avg. Precision" "Penalty" test_set_clr_penalties_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)


rule draw_F1_score_comparison_boxplots_clr_test_penalties:
    input:
        c_0_00001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_clr_penalties_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_00001}},{{input.c_0_0001}},{{input.c_0_001}},{{input.c_0_01}},{{input.c_0_1}},{{input.c_10}},{{input.c_100}},{{input.c_1000}},{{input.c_10000}},{{input.c_100000}}" "0.00001,0.0001,0.001,0.01,0.1,10.0,100.0,1000.0,10000.0,100000" "F1-Score" "Penalty" test_set_clr_penalties_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_AP_score_comparison_boxplots_clr_test_penalties_fine_grained:
    input:
        c_0_0002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_clr_penalties_fine_grained_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_0002}},{{input.c_0_0004}},{{input.c_0_0006}},{{input.c_0_0008}},{{input.c_0_001}},{{input.c_0_002}},{{input.c_0_004}},{{input.c_0_006}},{{input.c_0_008}}" "0.0002,0.0004,0.0006,0.0008,0.001,0.002,0.004,0.006,0.008" "Avg. Precision" "Penalty" test_set_clr_penalties_fine_grained_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)


rule draw_F1_score_comparison_boxplots_clr_test_penalties_fine_grained:
    input:
        c_0_0002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.thresh_0_5.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_clr_penalties_fine_grained_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_0002}},{{input.c_0_0004}},{{input.c_0_0006}},{{input.c_0_0008}},{{input.c_0_001}},{{input.c_0_002}},{{input.c_0_004}},{{input.c_0_006}},{{input.c_0_008}}" "0.0002,0.0004,0.0006,0.0008,0.001,0.002,0.004,0.006,0.008" "F1-Score" "Penalty" test_set_clr_penalties_fine_grained_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands: 
            shell(c)


############ UMAP plots
rule draw_UMAP_10x_aggregate_by_cluster_leiden_1_0_filtered_binary_prec_0_0_pca_3000_ir_downweight_by_class: 
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_1_0_filtered_binary_pref_0_0_UMAP_plots'.format(env=config['env_dir'])
    run:
        commands = [
            'python {src}/evaluate/plot_UMAP_PBMC.py {env}/datasets/untampered_bulk_primary_cells_with_data {env}/datasets/zheng_10x_PBMC_2000_cells_per_type {{input}} -o {{output}}'.format(
                env=config['env_dir'], 
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

rule draw_UMAP_ERP017126_aggregate_by_cluster_leiden_1_0_filtered_binary_prec_0_0_pca_3000_ir_downweight_by_class:
    input:
        bin='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            test_feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        res='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            test_feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/ERP017126_leiden_1_0_filtered_binary_pref_0_0_UMAP_plots'.format(env=config['env_dir'])
    run:
        commands = [
            'python {src}/evaluate/plot_UMAP_pancreatic.py {env}/datasets/untampered_bulk_primary_cells_with_data {env}/datasets/untampered_single_cell_primary_cells_with_data {{input.bin}} {{input.res}} -o {{output}}'.format(
                env=config['env_dir'],
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

rule draw_UMAP_SRP067844_aggregate_by_cluster_leiden_1_0_filtered_binary_prec_0_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{test_feats}/{algo}/filtered_binary_classification_results.prec_0.0.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data',
            test_feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/SRP067844_leiden_1_0_filtered_binary_pref_0_0_UMAP_plots'.format(env=config['env_dir'])
    run:
        commands = [
            'python {src}/evaluate/plot_UMAP_neural.py {env}/datasets/untampered_bulk_primary_cells_with_data {env}/datasets/untampered_single_cell_primary_cells_with_data {{input}} -o {{output}}'.format(
                env=config['env_dir'],
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

###### dataset statistics

# FIGURE FOR PAPER
rule generate_dataset_stats:
    output:
        '{env}/final_figures/dataset_stats.txt'.format(env=config['env_dir'])
    run:
        cmd='python {src}/evaluate/dataset_stats.py {env}/datasets/untampered_bulk_primary_cells_with_data,{env}/datasets/train_set.untampered_bulk_primary_cells_with_data,{env}/datasets/test_set.untampered_bulk_primary_cells_with_data,{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk,{env}/datasets/untampered_single_cell_primary_cells_with_data > {{output}}'.format(
            env=config['env_dir'],
            src=config['cello_dev']
        )
        shell(cmd)

##### Generate supplemental tables

rule supplemental_tables_bulk:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/Supplemental_Table_1.tsv'.format(env=config['env_dir'])
    run:
        cmd='python build_bulk_AP_supplemental_table.py {input.ir} {input.clr} -o {output}'
        shell(cmd)

rule supplemental_table_sc:
    input:
        ir_bin='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        ir_rank='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr_rank='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr_bin='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/filtered_binary_prec_0_0_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/Supplemental_Table_2.tsv'.format(env=config['env_dir'])     
    run:
        cmd='python build_sc_supplemental_table.py {input.ir_rank} {input.ir_bin} {input.clr_rank} {input.clr_bin} -o {output}'
        shell(cmd)




